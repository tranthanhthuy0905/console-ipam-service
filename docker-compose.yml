version: '3'

services:
  postgres:
    container_name: ipam_api_postgres
    image: postgres

    # Config the env file to set the standard environment of running the container
    env_file:
      - ./.env

    # Once the container is deleted, we still can access it locally via Volumes
    volumes:
      - ../db/postgres:/data/postgres

    # The repeatable process of calling roll
    restart: unless-stopped

    # Optional
    networks:
      - prod

  # "Engine-ex" - open-source web server dev = event-driven + asynchronous
  # 1 worker process controls the similar request flows. It contains worker connection:
  # Workflow: Worker connection receives similar requests (1024) => send to worker connection + master connection
  # => Master process (in nginx server) output the in4



  nginx:
    image: nginx:latest
    container_name: ipam_api_nginx
    ports:
      - "8880:80"
    volumes:
      - ./config/nginx:/etc/nginx/conf.d
      - ./static:/static
      - ./site:/site
    depends_on:
      - web
    networks:
      - prod
  web:
    container_name: ipam_api_web
    restart: always
    env_file:
      - ./.env
    image: ipam_api_web
    build: ./
    environment:
      - DJANGO_CONFIGURATION=Production
    command: >
      sh -c "python wait_for_postgres.py &&
             ./manage.py migrate &&
             gunicorn --bind 0.0.0.0:8880 -w 4 --threads 4 --access-logfile - ep_ipam_api.wsgi:application"
    volumes:
      - ./:/code
      - ./static:/static
    expose:
      - "8880"
    depends_on:
      - postgres
    networks:
      - prod

  redis:
    container_name: ipam_api_redis
    image: redis:alpine
    networks:
      - prod

volumes:
  postgres:

networks:
  prod:
    external:
      name: ipam_api
